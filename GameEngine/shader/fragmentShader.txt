#version 330 core
out vec4 FragColor;

uniform sampler2D texture1;
uniform vec3 lightColor[2] ;

in vec2 textureCoord;
in vec3 surfaceNormal;
in vec3 toLightVector[2];
in vec3 toCameraVector;

uniform float shineDamper;
uniform float reflexivity;

vec3 totaleDiffuse = vec3(0 , 0 , 0);
vec3 totaleSpecular = vec3(0 , 0 , 0);


void main()
{
   vec3 unitNormal = normalize(surfaceNormal);
   vec3 unitVectorToCamera = normalize(toCameraVector);

   for (int i = 0 ; i < 2 ; i++)
   {
      vec3 unitLightVector = normalize(toLightVector[i]);
      float nDot = dot(unitNormal,unitLightVector);
      float brightness = max(nDot,0.0);
      vec3 lightDirection = -unitLightVector;
      vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
      float speculatFactor = dot(reflectedLightDirection,unitVectorToCamera);
      speculatFactor = max(speculatFactor,0.0);
      float dumpedFactor = pow(speculatFactor,shineDamper);
      totaleDiffuse = totaleDiffuse + brightness * lightColor[i];
      totaleSpecular = totaleSpecular + dumpedFactor * reflexivity * lightColor[i];
   }
   
   FragColor =  vec4(0,0,1,1.0);
}