#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aText;
layout (location = 2) in vec3 aNorm;


out vec2 textureCoord;
out vec3 surfaceNormal;
out vec3 toLightVector[2];
out vec3 toCameraVector;

uniform mat4 projection ;
uniform mat4 view ;
uniform mat4 model ;


uniform vec3 lightPos[2] ;

void main()
{
   surfaceNormal = (model * vec4(aNorm,0.0)).xyz ;
   
   for (int i = 0 ; i < 2 ; i++)
   {
      toLightVector[i] = lightPos[i] - (model * vec4(aPos,0.0)).xyz;
   }

   toCameraVector = (inverse(view)*vec4(0,0,0,1)).xyz -  (model * vec4(aPos,1.0)).xyz;
   textureCoord = aText;
   gl_Position = projection * view * model * vec4(aPos.x, aPos.y, aPos.z, 1.0);
}